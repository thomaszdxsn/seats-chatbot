import { screen, render } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import Home from './page'
import '@testing-library/jest-dom'

// Mock the useChat hook
jest.mock('ai/react', () => ({
  useChat: jest.fn(() => ({
    messages: [],
    input: '',
    handleInputChange: jest.fn(),
    handleSubmit: jest.fn(),
    isLoading: false,
    error: null,
  })),
}))

import { useChat } from 'ai/react'
const mockUseChat = useChat as jest.MockedFunction<typeof useChat>

describe('Home Page', () => {
  beforeEach(() => {
    mockUseChat.mockReturnValue({
      messages: [],
      input: '',
      handleInputChange: jest.fn(),
      handleSubmit: jest.fn(),
      isLoading: false,
      error: null,
    })
  })

  it('renders the main heading', () => {
    render(<Home />)
    
    expect(screen.getByRole('heading', { name: /travel chatbot/i })).toBeInTheDocument()
  })

  it('displays the subtitle correctly', () => {
    render(<Home />)
    
    expect(screen.getByText(/your intelligent travel assistant/i)).toBeInTheDocument()
  })

  it('shows welcome message when no messages exist', () => {
    render(<Home />)
    
    expect(screen.getByText(/start chatting and let me help you plan the perfect trip!/i)).toBeInTheDocument()
  })

  it('renders input field with correct placeholder', () => {
    render(<Home />)
    
    expect(screen.getByPlaceholderText(/enter your travel questions/i)).toBeInTheDocument()
  })

  it('renders send button', () => {
    render(<Home />)
    
    expect(screen.getByRole('button', { name: /send/i })).toBeInTheDocument()
  })

  it('disables send button when input is empty', () => {
    render(<Home />)
    
    const sendButton = screen.getByRole('button', { name: /send/i })
    expect(sendButton).toBeDisabled()
  })

  it('enables send button when input has text', () => {
    mockUseChat.mockReturnValue({
      messages: [],
      input: 'Hello',
      handleInputChange: jest.fn(),
      handleSubmit: jest.fn(),
      isLoading: false,
      error: null,
    })

    render(<Home />)
    
    const sendButton = screen.getByRole('button', { name: /send/i })
    
    expect(sendButton).toBeEnabled()
  })

  it('displays messages from useChat hook', () => {
    const mockMessages = [
      { id: '1', role: 'user' as const, content: 'Hello, I need help planning a trip' },
      { id: '2', role: 'assistant' as const, content: 'I can help you plan your travel!' }
    ]

    mockUseChat.mockReturnValue({
      messages: mockMessages,
      input: '',
      handleInputChange: jest.fn(),
      handleSubmit: jest.fn(),
      isLoading: false,
      error: null,
    })

    render(<Home />)
    
    expect(screen.getByText('Hello, I need help planning a trip')).toBeInTheDocument()
    expect(screen.getByText('I can help you plan your travel!')).toBeInTheDocument()
  })

  it('shows loading state when isLoading is true', () => {
    mockUseChat.mockReturnValue({
      messages: [],
      input: '',
      handleInputChange: jest.fn(),
      handleSubmit: jest.fn(),
      isLoading: true,
      error: null,
    })

    render(<Home />)
    
    // Check for loading dots
    const loadingDots = screen.container.querySelectorAll('.animate-bounce')
    expect(loadingDots).toHaveLength(3)
  })

  it('disables form when loading', () => {
    mockUseChat.mockReturnValue({
      messages: [],
      input: 'Test message',
      handleInputChange: jest.fn(),
      handleSubmit: jest.fn(),
      isLoading: true,
      error: null,
    })

    render(<Home />)
    
    const input = screen.getByPlaceholderText(/enter your travel questions/i)
    const sendButton = screen.getByRole('button', { name: /send/i })
    
    expect(input).toBeDisabled()
    expect(sendButton).toBeDisabled()
  })

  it('shows error message when error exists', () => {
    const mockError = new Error('API connection failed')
    
    mockUseChat.mockReturnValue({
      messages: [],
      input: '',
      handleInputChange: jest.fn(),
      handleSubmit: jest.fn(),
      isLoading: false,
      error: mockError,
    })

    render(<Home />)
    
    expect(screen.getByText(/error:/i)).toBeInTheDocument()
    expect(screen.getByText(/api connection failed/i)).toBeInTheDocument()
  })

  it('calls handleSubmit when form is submitted', async () => {
    const user = userEvent.setup()
    const mockHandleSubmit = jest.fn()
    
    mockUseChat.mockReturnValue({
      messages: [],
      input: 'Test message',
      handleInputChange: jest.fn(),
      handleSubmit: mockHandleSubmit,
      isLoading: false,
      error: null,
    })

    render(<Home />)
    
    const form = screen.getByRole('button', { name: /send/i }).closest('form')!
    
    await user.click(screen.getByRole('button', { name: /send/i }))
    
    expect(mockHandleSubmit).toHaveBeenCalled()
  })

  it('calls handleInputChange when input changes', async () => {
    const user = userEvent.setup()
    const mockHandleInputChange = jest.fn()
    
    mockUseChat.mockReturnValue({
      messages: [],
      input: '',
      handleInputChange: mockHandleInputChange,
      handleSubmit: jest.fn(),
      isLoading: false,
      error: null,
    })

    render(<Home />)
    
    const input = screen.getByPlaceholderText(/enter your travel questions/i)
    
    await user.type(input, 'H')
    
    expect(mockHandleInputChange).toHaveBeenCalled()
  })
})